{"version":3,"sources":["webparts/helloWorld/HelloWorldWebPart.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,8DAAqD;AACrD,8DAOoC;AACpC,gEAAqD;AAErD,iFAAqD;AACrD,kDAAoD;AAEpD,mDAA8C;AAC9C,8CAG4B;AAW5B;IAAsD,4CAA8C;IAApG;;IAmFA,CAAC;IAjFQ,yCAAM,GAAb;QACE,IAAI,CAAC,UAAU,CAAC,SAAS,GAAG,0BACZ,uCAAM,CAAC,UAAU,kCACf,uCAAM,CAAC,SAAS,wFACsC,uCAAM,CAAC,GAAG,6VAI9B,yBAAM,CAAC,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,sEACnC,yBAAM,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,mFAChB,yBAAM,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC,oEAC1D,uCAAM,CAAC,MAAM,2CACnC,uCAAM,CAAC,KAAK,iHAK9B,CAAC;IACZ,CAAC;IAED,sBAAc,iDAAW;aAAzB;YACE,MAAM,CAAC,yBAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAC9B,CAAC;;;OAAA;IAES,+DAA4B,GAAtC;QACE,MAAM,CAAC;YACL,KAAK,EAAE;gBACL;oBACE,MAAM,EAAE;wBACN,WAAW,EAAE,OAAO,CAAC,uBAAuB;qBAC7C;oBACD,MAAM,EAAE;wBACN;4BACE,SAAS,EAAE,OAAO,CAAC,cAAc;4BACjC,WAAW,EAAE;gCACX,uCAAqB,CAAC,aAAa,EAAE;oCACnC,KAAK,EAAE,OAAO,CAAC,qBAAqB;iCACrC,CAAC;gCACF,uCAAqB,CAAC,MAAM,EAAE;oCAC5B,KAAK,EAAE,uBAAuB;oCAC9B,SAAS,EAAE,IAAI;iCAChB,CAAC;gCACF,sCAAoB,CAAC,OAAO,EAAE;oCAC5B,IAAI,EAAE,UAAU;iCACjB,CAAC;gCACF,sCAAoB,CAAC,OAAO,EAAE;oCAC5B,KAAK,EAAE,UAAU;oCACjB,OAAO,EAAE;wCACP,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,KAAK,EAAC;wCACxB,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,KAAK,EAAC;wCACxB,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,OAAO,EAAC;wCAC1B,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,MAAM,EAAC;qCAC1B;iCACF,CAAC;gCACF,oCAAkB,CAAC,OAAO,EAAE;oCAC1B,KAAK,EAAE,QAAQ;oCACf,MAAM,EAAE,IAAI;oCACZ,OAAO,EAAE,KAAK;iCACf,CAAC;6BACH;yBACF;qBACF;iBACF;aACF;SACF,CAAC;IACJ,CAAC;IAEO,+CAAY,GAApB;QACE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,WAAW,GAAG,yCAAyC,EAAE,sBAAY,CAAC,cAAc,CAAC,EAAE,CAAC;aACzJ,IAAI,CAAC,UAAC,QAA8B;YACnC,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;QACzB,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,mDAAgB,GAAxB;QACE,MAAM,CAAC,wBAAc,CAAC,GAAG,EAAE;aAC1B,IAAI,CAAC,UAAC,IAAe;YACpB,IAAI,QAAQ,GAAa,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;YACzC,MAAM,CAAC,QAAQ,CAAC;QAClB,CAAC,CAAsB,CAAC;IAC1B,CAAC;IACH,+BAAC;AAAD,CAnFA,AAmFC,CAnFqD,uCAAqB,GAmF1E","file":"webparts/helloWorld/HelloWorldWebPart.js","sourcesContent":["import { Version } from '@microsoft/sp-core-library';\r\nimport {\r\n  BaseClientSideWebPart,\r\n  IPropertyPaneConfiguration,\r\n  PropertyPaneTextField,\r\n  PropertyPaneCheckbox,\r\n  PropertyPaneDropdown,\r\n  PropertyPaneToggle\r\n} from '@microsoft/sp-webpart-base';\r\nimport { escape } from '@microsoft/sp-lodash-subset';\r\n\r\nimport styles from './HelloWorldWebPart.module.scss';\r\nimport * as strings from 'HelloWorldWebPartStrings';\r\nimport { IHelloWorldWebPartProps } from './IHelloWorldWebPartProps';\r\nimport MockHttpClient from \"./MockHttpClient\";\r\nimport {\r\n  SPHttpClient,\r\n  SPHttpClientResponse\r\n} from \"@microsoft/sp-http\";\r\n\r\nexport interface ISPLists {\r\n  value: ISPList[];\r\n}\r\n\r\nexport interface ISPList {\r\n  Title: string;\r\n  Id: string;\r\n}\r\n\r\nexport default class HelloWorldWebPartWebPart extends BaseClientSideWebPart<IHelloWorldWebPartProps> {\r\n\r\n  public render(): void {\r\n    this.domElement.innerHTML = `\r\n      <div class=\"${styles.helloWorld}\">\r\n        <div class=\"${styles.container}\">\r\n          <div class=\"ms-Grid-row ms-bgColor-themeDark ms-fontColor-white ${styles.row}\">\r\n            <div class=\"ms-Grid-col ms-lg10 ms-xl8 ms-xlPush2 ms-lgPush1\">\r\n              <span class=\"ms-font-xl ms-fontColor-white\">Welcome to SharePoint!</span>\r\n              <p class=\"ms-font-l ms-fontColor-white\">Customize SharePoint experiences using Web Parts.</p>\r\n              <p class=\"ms-font-l ms-fontColor-white\">${escape(this.properties.description)}</p>\r\n              <p class=\"ms-font-l ms-fontColor-white\">${escape(this.properties.test2)}</p>\r\n              <p class=\"ms-font-l ms-fontColor-white\">Loading from ${escape(this.context.pageContext.web.title)}</p>\r\n              <a href=\"https://aka.ms/spfx\" class=\"${styles.button}\">\r\n                <span class=\"${styles.label}\">Learn more</span>\r\n              </a>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>`;\r\n  }\r\n\r\n  protected get dataVersion(): Version {\r\n    return Version.parse('1.0');\r\n  }\r\n\r\n  protected getPropertyPaneConfiguration(): IPropertyPaneConfiguration {\r\n    return {\r\n      pages: [\r\n        {\r\n          header: {\r\n            description: strings.PropertyPaneDescription\r\n          },\r\n          groups: [\r\n            {\r\n              groupName: strings.BasicGroupName,\r\n              groupFields: [\r\n                PropertyPaneTextField('description', {\r\n                  label: strings.DescriptionFieldLabel\r\n                }),\r\n                PropertyPaneTextField(\"test\", {\r\n                  label: \"Multi-line Text Field\",\r\n                  multiline: true\r\n                }),\r\n                PropertyPaneCheckbox(\"test1\", {\r\n                  text: \"Checkbox\"\r\n                }),\r\n                PropertyPaneDropdown(\"test2\", {\r\n                  label: \"Dropdown\",\r\n                  options: [\r\n                    { key: \"1\", text: \"One\"},\r\n                    { key: \"2\", text: \"Two\"},\r\n                    { key: \"3\", text: \"Three\"},\r\n                    { key: \"4\", text: \"Four\"}                                                           \r\n                  ]\r\n                }),\r\n                PropertyPaneToggle(\"test3\", {\r\n                  label: \"Toggle\",\r\n                  onText: \"On\",\r\n                  offText: \"Off\"\r\n                })\r\n              ]\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    };\r\n  }\r\n\r\n  private _getListData(): Promise<ISPLists> {\r\n    return this.context.spHttpClient.get(this.context.pageContext.web.absoluteUrl + `/_api/web/lists?$filter=Hidden eq false`, SPHttpClient.configurations.v1)\r\n    .then((response: SPHttpClientResponse) => {\r\n      return response.json();\r\n    });\r\n  }\r\n  \r\n  private _getMockListData(): Promise<ISPLists> {\r\n    return MockHttpClient.get()\r\n    .then((data: ISPList[]) => {\r\n      var listData: ISPLists = { value: data };\r\n      return listData;\r\n    }) as Promise<ISPLists>;\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}